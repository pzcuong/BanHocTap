// Generated by LiveScript 1.6.0
var fs, path, fsExtra, colors, base, aux, adapter, assetbuild;
fs = require('fs');
path = require('path');
fsExtra = require('fs-extra');
colors = require('@plotdb/colors');
base = require('./base');
aux = require('../aux');
adapter = require('../adapter');
assetbuild = function(opt){
  opt == null && (opt = {});
  this._ext = opt.ext || ['png', 'gif', 'jpg', 'svg', 'json'];
  this.init(import$({
    srcdir: 'src/assets',
    desdir: 'static/assets'
  }, opt));
  this._re = new RegExp("^" + this.desdir + "/(.+?.(?:" + this._ext.join('|') + "))$");
  return this;
};
assetbuild.prototype = import$(Object.create(base.prototype), {
  getDependencies: function(file){
    return [];
  },
  isSupported: function(file){
    var ref$;
    return in$((ref$ = file.split('.'))[ref$.length - 1] || '', this._ext) && file.startsWith(this.srcdir);
  },
  resolve: function(file){
    var ret;
    if (!(ret = this._re.exec(file))) {
      return null;
    }
    return path.join(this.srcdir, ret[1] + "");
  },
  map: function(file){
    return {
      src: file,
      des: file.replace(this.srcdir, this.desdir)
    };
  },
  build: function(files){
    var i$, len$, ref$, file, mtime, src, des, t1, desdir, t2, e, results$ = [];
    for (i$ = 0, len$ = files.length; i$ < len$; ++i$) {
      ref$ = files[i$], file = ref$.file, mtime = ref$.mtime;
      try {
        ref$ = this.map(file), src = ref$.src, des = ref$.des;
        if (!fs.existsSync(src) || aux.newer(des, mtime)) {
          continue;
        }
        t1 = Date.now();
        desdir = path.dirname(des);
        fsExtra.ensureDirSync(desdir);
        fsExtra.copySync(src, des);
        t2 = Date.now();
        results$.push(this.log.info(src + " --> " + des + " ( " + (t2 - t1) + "ms )"));
      } catch (e$) {
        e = e$;
        this.log.error((src + " failed: ").red);
        results$.push(this.log.error(e.message.toString()));
      }
    }
    return results$;
  },
  purge: function(files){
    var i$, len$, ref$, file, mtime, src, des;
    for (i$ = 0, len$ = files.length; i$ < len$; ++i$) {
      ref$ = files[i$], file = ref$.file, mtime = ref$.mtime;
      ref$ = this.map(file), src = ref$.src, des = ref$.des;
      if (!fs.existsSync(des)) {
        return;
      }
      fs.unlinkSync(des);
      this.log.warn((src + " --> " + des + " deleted.").yellow);
    }
  }
});
module.exports = assetbuild;
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}
function in$(x, xs){
  var i = -1, l = xs.length >>> 0;
  while (++i < l) if (x === xs[i]) return true;
  return false;
}