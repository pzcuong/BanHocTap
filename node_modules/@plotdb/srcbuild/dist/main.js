// Generated by LiveScript 1.6.0
var fs, i18n, watch, pug, stylus, lsc, bundle, base;
fs = require('fs');
i18n = require('./i18n');
watch = require('./watch');
pug = require('./ext/pug');
stylus = require('./ext/stylus');
lsc = require('./ext/lsc');
bundle = require('./ext/bundle');
base = require('./ext/base');
module.exports = {
  base: base,
  i18n: i18n,
  lsp: function(opt){
    var base, adapters, ref$, watcher;
    opt == null && (opt = {});
    base = opt.base || 'web';
    adapters = [
      new lsc(import$((ref$ = {
        base: base
      }, ref$.logger = opt.logger, ref$.i18n = opt.i18n, ref$.ignored = opt.ignored, ref$), opt.lsc || {})), new stylus(import$((ref$ = {
        base: base
      }, ref$.logger = opt.logger, ref$.i18n = opt.i18n, ref$.ignored = opt.ignored, ref$), opt.stylus || {})), new pug(import$((ref$ = {
        base: base
      }, ref$.logger = opt.logger, ref$.i18n = opt.i18n, ref$.ignored = opt.ignored, ref$), opt.pug || {})), new bundle(import$((ref$ = {
        base: base
      }, ref$.logger = opt.logger, ref$.i18n = opt.i18n, ref$.ignored = opt.ignored, ref$), opt.bundle || {}))
    ].map(function(it){
      return it.getAdapter();
    });
    return watcher = new watch((ref$ = {
      adapters: adapters
    }, ref$.logger = opt.logger, ref$.i18n = opt.i18n, ref$.ignored = opt.ignored, ref$));
  }
};
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}